== Introduction

This is a set of tools that make it possible to connect Tor through an
browser-based proxy running on another computer. The flash proxy can be
run just by opening a web page in a computer that has Flash Player
installed.

There are five main parts. Our terminology for each part is in quotes.
1. The Tor "client," running on someone's localhost.
2. A "connector," which waits for connections from the flash proxy and
   the Tor client, and joins them together.
3. A "flash proxy," an application running in someone's web browser.
4. A "facilitator," a pseudo-HTTP server that keeps a list of clients
   that want a connection, and hands them out to proxies.
5. A Tor "relay," which is just a normal Tor relay.

The purpose of this project is to create many, generally ephemeral
bridge IP addresses, with the goal of outpacing a censor's ability to
block them. Rather than increasing the number of bridges at static
addresses, we aim to make existing bridges reachable by a larger and
changing pool of addresses.


== Demonstration page

This page has a description of the project; viewing it also turns your
computer into a flash proxy as long as the page is open.

http://crypto.stanford.edu/flashproxy/


== Quick start for users

You must have a version of Tor that supports pluggable transports. This
means version 0.2.2.32 (released 2011-08-29) or later.

All the flashproxy programs and source code can be downloaded this way:
	git clone https://git.torproject.org/flashproxy.git
But as a user you only need these files:
	https://gitweb.torproject.org/flashproxy.git/blob_plain/HEAD:/connector.py
	https://gitweb.torproject.org/flashproxy.git/blob_plain/HEAD:/torrc

There are different ways to get connected, depending on whether you are
able to receive direct TCP connections. The first method is preferred,
if you are able to configure port forwarding or receive direct
connections from the Internet.

If you don't get a connection within 30 seconds or so, make sure someone
with Flash Player is viewing http://crypto.stanford.edu/flashproxy/.
There aren't yet enough operational proxies that one is available all
the time.

=== Direct TCP connection

This is the preferred way to use a flash proxy when it's possible. The
only communication your computer makes with a fixed IP address is
registration with the facilitator: everything else happens over
ephemeral proxies.

1. Run the connector.
	$ python connector.py --register
   By default the connector listens on Internet-facing TCP port 9000. If
   you have to use a different port (to get through a firewall, for
   example), give it on the command lines like this (here using port
   8888):
	$ python connector.py --register 127.0.0.1:9001 :8888
2. Run Tor using the included torrc file.
	$ tor -f flashproxy/torrc

Watch the output of connector.py and tor. From connector.py you are
expecting output lines like this:
	Remote connection from XXX.XXX.XXX.XXX:YYYYY.
	Local connection from 127.0.0.1:ZZZZZ.
	Linking 127.0.0.1:ZZZZZ and XXX.XXX.XXX.XXX:YYYYY.
From tor you are looking for:
	[notice] Tor has successfully opened a circuit. Looks like client functionality is working.
	[notice] Bootstrapped 100%: Done.

=== Using a public connector

Rather than running connector.py on your computer, you can use a public
connector. This way is not as realistic because all your Tor traffic
will first go to a public connector, which is at a fixed address and can
be easily blocked. However this is an easy way to try out the system
without having to do port forwarding.
	$ tor ClientTransportPlugin "websocket socks4 tor-facilitator.bamsoftware.com:9999" UseBridges 1 Bridge "websocket 127.0.0.1:9001"

=== Troubleshooting

Make sure someone is viewing http://crypto.stanford.edu/flashproxy/, or
another web page with a flash proxy badge on it.

Sometimes Tor can think that the bridge you reach through a proxy is
unreachable after the proxy is disconnected, even if there is another
proxy immediately available. If you are able to build Tor from source,
try applying the patch patches/tor-ignore-bridge-failure.patch.
	$ git apply ~/flashproxy/patches/tor-ignore-bridge-failure.patch
or
	$ patch -p1 < ~/flashproxy/patches/tor-ignore-bridge-failure.patch

If tor hangs at 10% with these messages:
	[notice] Bootstrapped 10%: Finishing handshake with directory server.
	[notice] no known bridge descriptors running yet; stalling
as a last resort you can try deleting the files in ~/.tor and
/var/lib/tor, and then restarting tor.

If tor apparently hangs here:
	[notice] Bootstrapped 50%: Loading relay descriptors.
	[notice] new bridge descriptor '...' (fresh)
wait a few minutes. It can take a while to download relay descriptors.

If you suspect that the facilitator has lost your client registration, you can
re-register:
	$ python flashproxy-reg-http.py


== How to run a relay

The relay runs with a WebSocket proxy in external proxy mode.
	git clone git://github.com/kanaka/websockify.git
	git apply ~/flashproxy/patches/websockify-binary-default.patch
This command proxies WebSocket on port 9901 to a local ORPort on 9001.
	./websockify :9901 127.0.0.1:9001
The init.d script described under "Installing so as to restart at boot"
does this automatically.

Add this line to torrc to make the relay use the external proxy:
	ServerTransportPlugin websocket proxy 127.0.0.1:9901

== How to put a flash proxy badge on a web page

Paste in this HTML where you want the badge to appear:

<iframe src="//crypto.stanford.edu/flashproxy/embed.html" width="70px" height="23px" frameBorder="0" scrolling="no"></iframe>


== For developers

See design.txt for some more technical information.

=== Running a facilitator

On the facilitator, run
	$ ./facilitator.py -r <relay-ip>
You can use "tor1.bamsoftware.com" for <relay-ip>. The facilitator runs
on port 9002 by default.

=== Installing so as to restart at boot

The directory init.d contains scripts to start the facilitator on
CentOS. "make install" copies files to /usr/local/bin.

	# make install
	# useradd -d /dev/null -s /bin/false flashproxy
	# mkdir /var/flashproxy
	# chown -R flashproxy.flashproxy /var/flashproxy/

	# cp init.d/facilitator /etc/init.d/facilitator
	-- Edit /etc/init.d/facilitator to set $RELAY.
	# chkconfig --add facilitator
	# service facilitator start

	# cd websockify
	# git apply ~/flashproxy/patches/websockify-binary-default.patch
	# cp websockify websocket.py /usr/local/bin
	# useradd -d /dev/null -s /bin/false websockify
	# mkdir /var/websockify
	# chown -R websockify.websockify /var/websockify
	# cp ~/flashproxy/init.d/websockify /etc/init.d/websockify
	# chkconfig --add websockify
	# service websockify start
