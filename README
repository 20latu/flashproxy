== Introduction

This is a set of tools that make it possible to connect Tor through an
browser-based proxy running on another computer. The flash proxy can be
run just by opening a web page in a computer that has Flash Player
installed.

There are five main parts. Our terminology for each part is in quotes.
1. The Tor "client," running on someone's localhost.
2. A "connector," which waits for connections from the flash proxy and
   the Tor client, and joins them together.
3. A "flash proxy," running in someone's web browser. This piece is
   called swfcat because it is like a netcat implemented in Flash.
4. A "facilitator," a pseudo-HTTP server that keeps a list of clients
   that want a connection, and hands them out to proxies.
5. A Tor "relay," which is just a normal Tor relay except that its host
   must also serve a Flash crossdomain policy.

The purpose of this project is to create many, generally ephemeral
bridge IP addresses, with the goal of outpacing a censor's ability to
block them. Rather than increasing the number of bridges at static
addresses, we aim to make existing bridges reachable by a larger and
changing pool of addresses.


== Demonstration page

This page has a description of the project; viewing it also turns your
computer into a flash proxy as long as the page is open. (Only if you
have Adobe Flash Player installed.)

https://crypto.stanford.edu/flashproxy/


== Quick start for users

You must have a version of Tor that supports the Socks4Proxy option.
This means version 0.2.2.32 (released 2011-08-29) or later.

All the flashproxy programs and source code can be downloaded this way:
	git clone https://git.torproject.org/flashproxy.git
But as a user you only need these files:
	https://gitweb.torproject.org/flashproxy.git/blob_plain/HEAD:/connector.py
	https://gitweb.torproject.org/flashproxy.git/blob_plain/HEAD:/torrc

There are different ways to get connected, depending on whether you are
able to receive direct TCP connections. The first method is preferred,
if you are able to configure port forwarding or receive direct
connections from the Internet.

If you don't get a connection within 30 seconds or so, make sure someone
with Flash Player is viewing https://crypto.stanford.edu/flashproxy/.
There aren't yet enough operational proxies that one is available all
the time.

=== Direct TCP connection

This is the preferred way to use a flash proxy when it's possible. The
only communication your computer makes with a fixed IP address is
registration with the facilitator: everything else happens over
ephemeral proxies.

1. Run the connector and instruct it to register with a public
   facilitator.
	$ python connector.py -f tor-facilitator.bamsoftware.com
   By default the connector listens on Internet-facing TCP port 9000. If
   you have to use a different port (to get through a firewall, for
   example), give it on the command line like this (here using port
   8888):
	$ python connector.py -f tor-facilitator.bamsoftware.com :9001 :8888
2. Run Tor using the included torrc file.
	$ tor -f flashproxy/torrc

Watch the output of connector.py and tor. From connector.py you are
expecting output lines like this:
	Remote connection from XXX.XXX.XXX.XXX:YYYYY.
	Local connection from 127.0.0.1:ZZZZZ.
	Linking 127.0.0.1:ZZZZZ and XXX.XXX.XXX.XXX:YYYYY.
From tor you are looking for:
	[notice] Tor has successfully opened a circuit. Looks like client functionality is working.
	[notice] Bootstrapped 100%: Done.

=== Using a public connector

Rather than running connector.py on your computer, you can use a public
connector. This way is not as realistic because all your Tor traffic
will first go to a public connector, which is at a fixed address and can
be easily blocked. However this is an easy way to try out the system
without having to do port forwarding.

1. Edit the included torrc file to comment one line and uncomment
   another:
	# Socks4Proxy 127.0.0.1:9001
	Socks4Proxy tor-facilitator.bamsoftware.com:9999
2. Run Tor using the included torrc file.
	$ tor -f flashproxy/torrc

=== Using RTMFP

This method uses a protocol called RTMFP to communicate through a NAT
without port forwarding. However it uses a public server at a fixed
address as an intermediary, so it can be easily blocked. (The
intermediate server is operated by the flash proxy developers, not by
Adobe as is usual with RTMFP.) This method also requires Flash Player on
the Tor client, which the other methods don't.

1. Download swfcat.swf from
	https://crypto.stanford.edu/flashproxy/swfcat.swf
   and save it locally. We will assume it is saved at
   /home/user/flashproxy/swfcat.swf.
2. Run the connector, without giving it a facilitator, and listening on
   local ports only. In this configuration, it is the swfcat.swf program
   that communicates with the facilitator, not the connector.
	$ ./connector.py 127.0.0.1:9001 127.0.0.1:9002
3. Open in a browser
	file:///home/user/flashproxy/swfcat.swf?client=1&debug=1
   This should *not* be the same browser you use to browse over Tor. You
   should not run Flash in your Tor browser. Use a separate Firefox
   profile (firefox -no-remote -ProfileManager) or use a separate
   browser entirely.
4. Run Tor using the included torrc file.
	$ tor -f flashproxy/torrc

You will see status messages in the swfcat.swf window.

=== Troubleshooting

Make sure someone is viewing https://crypto.stanford.edu/flashproxy/, or
another web page with a flash proxy badge on it.

Sometimes Tor can think that the bridge you reach through a proxy is
unreachable after the proxy is disconnected, even if there is another
proxy immediately available. If you are able to build Tor from source,
try applying the patch patches/tor-ignore-bridge-failure.patch.
	$ git apply ~/flashproxy/patches/tor-ignore-bridge-failure.patch
or
	$ patch -p1 < ~/flashproxy/patches/tor-ignore-bridge-failure.patch

If tor hangs at 10% with these messages:
	[notice] Bootstrapped 10%: Finishing handshake with directory server.
	[notice] no known bridge descriptors running yet; stalling
as a last resort you can try deleting the files in ~/.tor and
/var/lib/tor, and then restarting tor.

If tor apparently hangs here:
	[notice] Bootstrapped 50%: Loading relay descriptors.
	[notice] new bridge descriptor '...' (fresh)
wait a few minutes. It can take a while to download relay descriptors.


== How to put a flash proxy badge on a web page.

Copy swfcat.swf to your server, then paste in this HTML where you want
the badge to appear:

<script type="text/javascript" src="https://crypto.stanford.edu/flashproxy/flashproxy.js"></script>

It will be inserted as a span element with the id "flashproxy-badge".


== For developers

See design.txt for some more technical information.

=== Building swfcat.swf

Download the (free software) Flex SDK.
	http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK
Put its bin directory in your PATH. The important executable is mxmlc.

To build, run
	$ make
Copy the resulting swfcat.swf file to a web server.

You can pass swfcat.swf the parameter debug=1 to see lots of debugging
information.

Adobe makes a debug version of Flash player that raises a window on
errors instead of silently failing, and exposes some logging functions.
	http://www.adobe.com/support/flashplayer/downloads.html

This is a good tutorial on ActionScript programming with the Flex tools,
with sample code:
	http://www.senocular.com/flash/tutorials/as3withmxmlc/
	http://www.senocular.com/flash/tutorials/as3withmxmlc/AS3Flex2b3StarterFiles.zip

=== Running a relay or facilitator

On the Tor relay, run
	# ./crossdomaind.py
In general, any computer that a proxy connects to needs to serve a
crossdomain policy, but the connector and facilitator have it built in.

On the facilitator, run
	$ ./facilitator.py -r <relay-ip>
You can use "tor1.bamsoftware.com" for <relay-ip>; it is already set up
to serve a crossdomain policy. The facilitator runs on port 9002 by
default.

=== Installing so as to restart at boot

The directory init.d contains scripts to start the facilitator and
crossdomaind server on CentOS. "make install" copies files to /usr/local/bin.

	# make install
	# useradd -d /dev/null -s /bin/false flashproxy
	# mkdir /var/flashproxy
	# chown -R flashproxy.flashproxy /var/flashproxy/

	# cp init.d/facilitator /etc/init.d/facilitator
	-- Edit /etc/init.d/facilitator to set $RELAY.
	# chkconfig --add facilitator
	# service facilitator start

	# cp init.d/crossdomaind /etc/init.d/crossdomaind
	# chkconfig --add crossdomaind
	# service crossdomaind start

=== Building the Cumulus RTMFP server

There is a free RTMFP rendezvous server called Cumulus. It is a
replacement for the Adobe Cirrus service at rtmfp://p2p.rtmfp.net/.
These are instructions to build and install it.

First install the prerequisite libpoco, http://poco.sourceforge.net/.
You only need the "Basic Edition."
	# apt-get install libpoco-dev
or
	$ cd poco-VERSION
	$ ./configure && make
	# make install

Follow these steps to install the Cumulus server. You need to open port
1935/udp in the firewall.
	$ git clone git://github.com/OpenRTMFP/Cumulus.git
	$ cd Cumulus
	$ patch -p0 < ~/flashproxy/patches/cumulus-no-manage-log.patch
	$ cd CumulusLib
	$ make LIBS=./
	# cp libCumulus.so /usr/local/lib
	$ cd ../../CumulusService
	$ make
	# cp CumulusService /usr/local/bin
	# useradd -d /dev/null -s /bin/false cumulus
	# mkdir /var/cumulus
	# chown -R cumulus.cumulus /var/cumulus
	# cp flashproxy/init.d/cumulus /etc/init.d/cumulus
	# chkconfig --add cumulus
	# service cumulus start
