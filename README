== Introduction

This is a set of tools that make it possible to connect Tor through an
Adobe Flash proxy running on another computer. The Flash proxy can be
run just by opening a web page in a computer that has Flash Player
installed.

There are five main parts. Our terminology for each part is in quotes.
1. The Tor "client," running on someone's localhost.
2. A "connector," which waits for connections from the Flash proxy and
   the Tor client, and joins them together.
3. A Flash "proxy," running in someone's web browser. This piece is
   called swfcat because it is like a netcat implemented in Flash.
4. A "facilitator," a pseudo-HTTP server that keeps a list of clients
   that want a connection, and hands them out to proxies.
5. A Tor "relay," which is just a normal Tor relay except that its host
   must also serve a Flash crossdomain policy.

A proxy is capable of connecting to a client in two ways: Using a normal
TCP connection; or over RTMFP, which requires Flash on the client but is
capable of traversing NAT.

== Demonstration page

https://crypto.stanford.edu/flashproxy/

== Quick start

=== Building

Download the (free software) Flex SDK.
	http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK
Put its bin directory in your PATH. The important executable is mxmlc.

To build, run
	$ make
Copy the resulting swfcat.swf file to a web server.

=== Connecting

On the Tor relay, run
	# ./crossdomaind.py
In general, any computer that a proxy connects to needs to serve a
crossdomain policy, but the connector and facilitator have it built in.

On the facilitator, run
	$ ./facilitator.py -r <relay-ip>
The facilitator runs on port 9002 by default.

In a browser somewhere, open swfcat.swf and pass it a parameters telling it
which facilitator to use, for example
	http://www.example.com/swfcat.swf?facilitator=<facilitator-ip>:9002&debug=1

There are two ways in which the client can receive connections: over TCP
or RTMFP. TCP doesn't send traffic to anyone other than the facilitator
and the proxy, but it only works if you have a public IP address. RTMFP
coordinates connections using another server (which may be the same as
the facilitator) and works when the client is behind a NAT.

To connect with TCP, run
	$ ./connector.py -f <facilitator-ip>
(If you are running the facilitator locally, be sure to use an external
IP address, not 127.0.0.1.) The connector informs the facilitator that
it wants a connection, then listens on 0.0.0.0:9000 and 127.0.0.1:9001.
The proxy will connect on port 9000 and the local Tor will connect on
9001.

To connect with RTMFP, run
	$ ./connector.py 127.0.0.1:9001 127.0.0.1:9002
and open in a browser
	http://www.example.com/swfcat.swf?client=1&facilitator=<facilitator-ip>:9002
In this case, it is swfcat running in client mode that registers with
the facilitator. The connector acts to join the local swfcat and the
local Tor client.

The client needs to be running a version of Tor that supports the
Socks4Proxy configuration. This means version 0.2.2.1-alpha or
later--not the current stable release.

Start Tor with the following configuration:
	UseBridges 1
	Bridge 127.0.0.1:9001
	Socks4Proxy 127.0.0.1:9001

If you see messages like
	[notice] Bootstrapped 10%: Finishing handshake with directory server.
	[notice] no known bridge descriptors running yet; stalling
try deleting the files in ~/.tor or /var/lib/tor.

You will be able to see byte counts flowing in the browser window, and
eventually be able to build a circuit.

== Building the Cumulus RTMFP server

There is a free RTMFP rendezvous server called Cumulus. It is a
replacement for the Adobe Cirrus service at rtmfp://p2p.rtmfp.net/.
These are instructions to build and install it.

First install the prerequisite libpoco, http://poco.sourceforge.net/.
You only need the "Basic Edition."
	# apt-get install libpoco-dev
or
	$ cd poco-VERSION
	$ ./configure && make
	# make install

Follow these steps to install the Cumulus server. You need to open port
1935/udp in the firewall.
	$ git clone git://github.com/OpenRTMFP/Cumulus.git
	$ cd Cumulus
	$ patch -p0 < cumulus-no-manage-log.patch
	$ cd CumulusLib
	$ make LIBS=./
	# cp libCumulus.so /usr/local/lib
	$ cd ../../CumulusService
	$ make
	# cp CumulusService /usr/local/bin
	# useradd -d /dev/null -s /bin/false cumulus
	# mkdir /var/cumulus
	# chown -R cumulus.cumulus /var/cumulus
	# cp flashproxy/cumulus /etc/init.d/cumulus
	# chkconfig --add cumulus
	# service cumulus start

== Rationale

The purpose of this project is to create many, generally ephemeral
bridge IP addresses, with the goal of outpacing a censor's ability to
block them. Rather than increasing the number of bridges at static
addresses, we aim to make existing bridges reachable by a larger and
changing pool of addresses.

== Design notes

Any Tor relay can be used, as long as it also serves a crossdomain
policy.

Clients register with the facilitator by sending an HTTP message:
	POST / HTTP/1.0\r\n
	\r\n
	client=<ip-addr/rtmfp-id>
The Flash proxy also gets a client address over HTTP:
	GET / HTTP/1.0\r\n
	\r\n
The server sends back address specifications of a client and a relay in
an HTTP respose.
	HTTP/1.0 200 OK\r\n
	\r\n
	client=<ip-addr/rtmfp-id>&relay=<relay-ip>

== Embedding in HTML

<object width="70" height="23">
    <param name="movie" value="swfcat.swf">
    <param name="flashvars" value="">
    <embed src="swfcat.swf" width="70" height="23" flashvars=""></embed>
</object>

== ActionScript programming

A good tutorial on ActionScript programming with the Flex tools, with
sample code:

http://www.senocular.com/flash/tutorials/as3withmxmlc/
http://www.senocular.com/flash/tutorials/as3withmxmlc/AS3Flex2b3StarterFiles.zip
