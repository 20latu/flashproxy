#!/usr/bin/env python

import getopt
import re
import os
import socket
import subprocess
import sys
import urlparse
import urllib2

DEFAULT_REMOTE_ADDRESS = None
DEFAULT_REMOTE_PORT = 9000

def get_external_ip():
    req = urllib2.Request("https://www.google.com/ip")
    req.add_header("Host", "flashproxy-reg.appspot.com")
    try:
        f = urllib2.urlopen(req)
    except:
        return ""
    ip = f.read()
    f.close()
    return ip

class options(object):
    address_family = socket.AF_UNSPEC
    facilitator_pubkey_filename = None

def usage(f = sys.stdout):
    print >> f, """\
Usage: %(progname)s [REMOTE][:PORT]
Register with a flash proxy facilitator through a Google App Engine app.
By default the remote address registered is "%(remote_addr)s" (the
external IP address is guessed).

  -4                     name lookups use only IPv4.
  -6                     name lookups use only IPv6.
      --facilitator-pubkey=FILENAME
                         encrypt registrations to the given PEM-formatted
                           public key (default built-in).
  -h, --help             show this help.\
""" % {
    "progname": sys.argv[0],
    "remote_addr": format_addr((DEFAULT_REMOTE_ADDRESS, DEFAULT_REMOTE_PORT)),
}

def parse_addr_spec(spec, defhost = None, defport = None):
    host = None
    port = None
    af = 0
    m = None
    # IPv6 syntax.
    if not m:
        m = re.match(ur'^\[(.+)\]:(\d*)$', spec)
        if m:
            host, port = m.groups()
            af = socket.AF_INET6
    if not m:
        m = re.match(ur'^\[(.+)\]$', spec)
        if m:
            host, = m.groups()
            af = socket.AF_INET6
    # IPv4/hostname/port-only syntax.
    if not m:
        try:
            host, port = spec.split(":", 1)
        except ValueError:
            host = spec
        if re.match(ur'^[\d.]+$', host):
            af = socket.AF_INET
        else:
            af = 0
    host = host or defhost
    port = port or defport
    if port is not None:
        port = int(port)
    return host, port

def format_addr(addr):
    host, port = addr
    if not host:
        return u":%d" % port
    # Numeric IPv6 address?
    try:
        addrs = socket.getaddrinfo(host, port, 0, socket.SOCK_STREAM, socket.IPPROTO_TCP, socket.AI_NUMERICHOST)
        af = addrs[0][0]
    except socket.gaierror, e:
        af = 0
    if af == socket.AF_INET6:
        result = u"[%s]" % host
    else:
        result = "%s" % host
    if port is not None:
        result += u":%d" % port
    return result

def generate_url(addr):
    if getattr(sys, "frozen", False):
        script_dir = os.path.dirname(sys.executable)
    else:
        script_dir = sys.path[0]
    if not script_dir:
        # Maybe the script was read from stdin; in any case don't guess at the directory.
        raise ValueError("Can't find executable directory for registration helpers")
    command = [os.path.join(script_dir, "flashproxy-reg-url"), "-f", "https://www.google.com/"]
    if options.facilitator_pubkey_filename is not None:
        command += ["--facilitator-pubkey", options.facilitator_pubkey_filename]
    command.append(format_addr(addr))
    p = subprocess.Popen(command, stdout=subprocess.PIPE)
    stdout, stderr = p.communicate()
    return stdout.strip()

opt, args = getopt.gnu_getopt(sys.argv[1:], "46h", ["facilitator-pubkey=", "help"])
for o, a in opt:
    if o == "-4":
        options.address_family = socket.AF_INET
    elif o == "-6":
        options.address_family = socket.AF_INET6
    elif o == "--facilitator-pubkey":
        options.facilitator_pubkey_filename = a
    elif o == "-h" or o == "--help":
        usage()
        sys.exit()

if len(args) == 0:
    remote_addr = (DEFAULT_REMOTE_ADDRESS, DEFAULT_REMOTE_PORT)
elif len(args) == 1:
    remote_addr = parse_addr_spec(args[0], DEFAULT_REMOTE_ADDRESS, DEFAULT_REMOTE_PORT)
else:
    usage(sys.stderr)
    sys.exit(1)

if options.address_family != socket.AF_UNSPEC:
    getaddrinfo = socket.getaddrinfo
    def getaddrinfo_replacement(host, port, family, *args, **kwargs):
        return getaddrinfo(host, port, options.address_family, *args, **kwargs)
    socket.getaddrinfo = getaddrinfo_replacement

if not remote_addr[0]:
    spec = get_external_ip()
    remote_addr = parse_addr_spec(spec, *remote_addr)
    if not remote_addr[0]:
        print >> sys.stderr, "Could not determine external ip address."
        sys.exit(1)

try:
    url = generate_url(remote_addr)
except Exception, e:
    print >> sys.stderr, "Error running flashproxy-reg-url: %s" % str(e)
    sys.exit(1)

req = urllib2.Request(url)
req.add_header("Host", "flashproxy-reg.appspot.com")
try:
    http = urllib2.urlopen(req)
except urllib2.HTTPError, e:
    print >> sys.stderr, "Status code was %d, not 200" % e.code
    sys.exit(1)
except urllib2.URLError, e:
    print >> sys.stderr, "Failed to register: %s" % str(e.reason)
    sys.exit(1)
except Exception, e:
    print >> sys.stderr, "Failed to register: %s" % str(e)
    sys.exit(1)
http.close()

print "Registered \"%s\" with %s." % (format_addr(remote_addr), "flashproxy-reg.appspot.com")
