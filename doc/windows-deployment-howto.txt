This document describes how to build standalone Windows executables of
the flash proxy client programs. The client programs are written in
Python, so we use a program called PyInstaller that compiles them into
executables.

These instructions were last tested in December 2012. Tarball version
numbers were up to date then; check for newer versions.

== Summary

Install the below dependencies, run
	$ make dist-exe
and a zip containing the executables will end up in the dist directory.

== Dependencies

=== Cygwin

Cygwin is used to provide a shell environment and other commands. We
don't actually use the Cygwin compatibility layer.

http://cygwin.com/install.html
http://cygwin.com/setup.exe
http://cygwin.com/setup.exe.sig

Verify the signature (do it on another machine if you don't already have
GnuPG installed locally).
	$ gpg --verify setup.exe.sig
You need to install at least the following packages:
	bash
	coreutils
	gnupg
	grep
	make
	mingw-gcc-core
	perl
	zip
Don't install the Cygwin python package. Use Python's own Windows
installer as described in the next section.

=== Python

Get the latest 32-bit installer in the 2.x series.

http://python.org/download/
http://python.org/ftp/python/2.7.3/python-2.7.3.msi
http://python.org/ftp/python/2.7.3/python-2.7.3.msi.asc

Verify the signature (instructions are on the download page).
	$ gpg --verify python-2.7.3.msi.asc
Run the installer. "Install for all users". Disable "Tcl/Tk",
"Documentation", "Utility Scripts", and "Test suite".

Set the PATH environment variable as described at
http://docs.python.org/2/using/windows.html#configuring-python:
	PATH=<existing path>;C:\Python27
You will have to restart your Cygwin shells to pick up the new PATH.

=== pywin32

This is a prerequisite for PyInstaller. Enter the directory containing
the latest build number, then download the "win32-py2.7" version of the
package.

http://sourceforge.net/projects/pywin32/files/pywin32/
http://downloads.sourceforge.net/project/pywin32/pywin32/Build%20218/pywin32-218.win32-py2.7.exe

The sha256sum of the package I used was

dd665cca88cb059fec960516ed5f29474b33fce50fcb2633d397d4a3aa705c16  pywin32-218.win32-py2.7.exe

=== PyInstaller

http://www.pyinstaller.org/#Downloads
https://github.com/downloads/pyinstaller/pyinstaller/pyinstaller-2.0.zip

The sha256sum of the package I used was

7f944ff131f6488ebad68e8db4a6f53f2d8054c618b6095d7cbba3ca0f733bab  pyinstaller-2.0.zip

You don't install this package; just unzip it at the same directory
level as the flashproxy source code. (The flashproxy makefile expects to
find PyInstaller at ../pyinstaller-2.0.)

=== OpenSSL  http://www.openssl.org/source/

https://openssl.org/source/
https://openssl.org/source/openssl-1.0.1c.tar.gz
https://openssl.org/source/openssl-1.0.1c.tar.gz.asc

Verify the signature.
	$ gpg --verify openssl-1.0.1c.tar.gz.asc
Build OpenSSL from source using Cygwin and MinGW. Install the Cygwin
package mingw-gcc-core if it's not already installed. Run these commands
in the OpenSSL source directory:
	CROSS_COMPILE=i686-pc-mingw32- ./Configure shared mingw
	make
	make install
Then, add C:\cygwin\usr\local\ssl\bin to PATH as you did with Python
above.

=== SWIG

This is a prerequisite for building M2Crypto.

http://www.swig.org/download.html
http://downloads.sourceforge.net/project/swig/swigwin/swigwin-2.0.8/swigwin-2.0.8.zip

The sha256sum of the package I used was

35bc3013d43e0034677c08bab30bfc94ed6d44fbfffa4c5158f5788d29f4636d  swigwin-2.0.8.zip

Just extract the zip in the same directory in which you will extract
M2Crypto.

=== M2Crypto

http://chandlerproject.org/Projects/MeTooCrypto#Downloads
http://pypi.python.org/packages/source/M/M2Crypto/M2Crypto-0.21.1.tar.gz
http://pypi.python.org/packages/source/M/M2Crypto/M2Crypto-0.21.1.tar.gz.asc

There are binary installers on the M2Crypto page, but it says they are
"provided by volunteers, untested by M2Crypto author." Instead build
from source.

The distutils build_ext command hardcodes the compiler name "gcc" when
using the "mingw32" compiler. Make a copy of the MinGW compiler with
that name.
	$ cp /usr/bin/i686-pc-mingw32-gcc /usr/bin/gcc
Build the package.
	$ PATH=$PATH:../swigwin-2.0.8 python setup.py build_ext -c mingw32 --openssl C:\\cygwin\\usr\\local\\ssl -L C:\\cygwin\\usr\\local\\ssl\\bin
	$ python setup.py bdist_wininst
This will leave an MSI installer in the dist directory. Double-click it
to install M2Crypto amid the other Python files.

=== 7-Zip

This is used to build a self-extracting bundle executable. The p7zip
package from Cywin doesn't work because the self-extracting executables
it produces requrie cygwin1.dll.

http://7-zip.org/download.html
http://downloads.sourceforge.net/project/sevenzip/7-Zip/9.20/7z920.msi

The sha256sum of the package I used was

fe4807b4698ec89f82de7d85d32deaa4c772fc871537e31fb0fccf4473455cb8 7z920.msi

== Browser bundle

Download the obfsproxy bundle from
https://www.torproject.org/projects/obfsproxy.

https://www.torproject.org/dist/torbrowser/tor-obfsproxy-browser-2.4.6-alpha-2_en-US.exe
https://www.torproject.org/dist/torbrowser/tor-obfsproxy-browser-2.4.6-alpha-2_en-US.exe.asc

Extract the bundle.

	$ gpg --verify tor-obfsproxy-browser-2.4.6-alpha-2_en-US.exe.asc
	$ "/cygdrive/c/Program Files (x86)/7-Zip/7z" x tor-obfsproxy-browser-2.4.6-alpha-2_en-US.exe
	$ cd "Tor Browser"

Copy files into the bundle. We could remove obfsproxy here but don't.
The -n option to cp prevents the existing LIBEAY32.dll and SSLEAY32.dll
from being overwritten.

	$ cp -n ~/flashproxy/dist/flashproxy-client-0.9-win32/{*.pyd,*.dll,*.exe,*.manifest} App
	$ mkdir -p Docs/FlashProxy
	$ cp ~/flashproxy/dist/flashproxy-client-0.9-win32/{doc/*,README,LICENSE} Docs/FlashProxy

Make the second half of Data/Tor/torrc look like this (i.e., keep
the generic configuration, but change the obfsproxy-specific stuff).
Basically you are concatenating the normal flashproxy-client torrc, but
changing "./flashproxy-client" to "flashproxy-client".

	UseBridges 1
	# The address and port are ignored by the client transport plugin.
	Bridge websocket 0.0.1.0:1
	LearnCircuitBuildTimeout 0
	CircuitBuildTimeout 60
	# Change the second number here (9000) to the number of a port that can
	# receive connections from the Internet (the port for which you
	# configured port forwarding).
	ClientTransportPlugin websocket exec flashproxy-client --register :0 :9000

Re-zip the bundle. The "alpha" number should be independent of the
obfsproxy bundle's alpha.

	$ cd ..
	$ "/cygdrive/c/Program Files (x86)/7-Zip/7z" a -sfx tor-flashproxy-browser-2.4.6-alpha-1_en-US.exe "Tor Browser"

Test running the bundle. Extract into a separate directory, double-click
the icon and "Start Tor Browser.exe".

	$ mkdir tmp
	$ cp tor-flashproxy-browser-2.4.6-alpha-1_en-US.exe tmp
