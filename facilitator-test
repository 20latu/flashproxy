#!/usr/bin/env python

import socket
import subprocess
import time
import unittest

import fac

FACILITATOR_HOST = "127.0.0.1"
FACILITATOR_PORT = 9002

def gimme_socket(host, port):
    addrinfo = socket.getaddrinfo(host, port, 0, socket.SOCK_STREAM, socket.IPPROTO_TCP)[0]
    s = socket.socket(addrinfo[0], addrinfo[1], addrinfo[2])
    s.settimeout(10.0)
    s.connect(addrinfo[4])
    return s

class FacilitatorTest(unittest.TestCase):
    def gimme_socket(self):
        return gimme_socket(FACILITATOR_HOST, FACILITATOR_PORT)

    def setUp(self):
        self.process = subprocess.Popen(["./facilitator", "-d", "-p", str(FACILITATOR_PORT), "-r", "0.0.1.0:1", "-l", "/dev/null"])
        time.sleep(0.1)

    def tearDown(self):
        self.process.terminate()

    def test_timeout(self):
        """Test that the socket will not accept slow writes indefinitely.
        Successive sends should not reset the timeout counter."""
        s = self.gimme_socket()
        time.sleep(0.3)
        s.send("w")
        time.sleep(0.3)
        s.send("w")
        time.sleep(0.3)
        s.send("w")
        time.sleep(0.3)
        s.send("w")
        time.sleep(0.3)
        self.assertRaises(socket.error, s.send, "w")

    def test_readline_limit(self):
        """Test that reads won't buffer indefinitely."""
        s = self.gimme_socket()
        buflen = 0
        try:
            while buflen + 1024 < 200000:
                s.send("X" * 1024)
                buflen += 1024
            self.fail("should have raised a socket error")
        except socket.error:
            pass

class ParseTransactionTest(unittest.TestCase):
    def test_empty_string(self):
        self.assertRaises(ValueError, fac.parse_transaction, "")

    def test_correct(self):
        self.assertEqual(fac.parse_transaction("COMMAND"), ("COMMAND", ()))
        self.assertEqual(fac.parse_transaction("COMMAND X=\"\""), ("COMMAND", (("X", ""),)))
        self.assertEqual(fac.parse_transaction("COMMAND X=\"ABC\""), ("COMMAND", (("X", "ABC"),)))
        self.assertEqual(fac.parse_transaction("COMMAND X=\"\\A\\B\\C\""), ("COMMAND", (("X", "ABC"),)))
        self.assertEqual(fac.parse_transaction("COMMAND X=\"\\\\\\\"\""), ("COMMAND", (("X", "\\\""),)))
        self.assertEqual(fac.parse_transaction("COMMAND X=\"ABC\" Y=\"DEF\""), ("COMMAND", (("X", "ABC"), ("Y", "DEF"))))
        self.assertEqual(fac.parse_transaction("COMMAND KEY-NAME=\"ABC\""), ("COMMAND", (("KEY-NAME", "ABC"),)))
        self.assertEqual(fac.parse_transaction("COMMAND KEY_NAME=\"ABC\""), ("COMMAND", (("KEY_NAME", "ABC"),)))

    def test_missing_command(self):
        self.assertRaises(ValueError, fac.parse_transaction, "X=\"ABC\"")
        self.assertRaises(ValueError, fac.parse_transaction, " X=\"ABC\"")

    def test_missing_space(self):
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND/X=\"ABC\"")
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=\"ABC\"Y=\"DEF\"")

    def test_bad_quotes(self):
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=\"")
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=\"ABC")
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=\"ABC\" Y=\"ABC")
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=\"ABC\\")

    def test_truncated(self):
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=")

    def test_newline(self):
        self.assertRaises(ValueError, fac.parse_transaction, "COMMAND X=\"ABC\" \nY=\"DEF\"")

if __name__ == "__main__":
    unittest.main()
